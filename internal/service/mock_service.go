// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock_service.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/amadrid196/max-inventory/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockService) AddProduct(ctx context.Context, products models.Products, userEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, products, userEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockServiceMockRecorder) AddProduct(ctx, products, userEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockService)(nil).AddProduct), ctx, products, userEmail)
}

// AddUserRole mocks base method.
func (m *MockService) AddUserRole(ctx context.Context, userID, roleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", ctx, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockServiceMockRecorder) AddUserRole(ctx, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockService)(nil).AddUserRole), ctx, userID, roleID)
}

// GetProduct mocks base method.
func (m *MockService) GetProduct(ctx context.Context, id int64) (*models.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(*models.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockServiceMockRecorder) GetProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockService)(nil).GetProduct), ctx, id)
}

// GetProducts mocks base method.
func (m *MockService) GetProducts(ctx context.Context) ([]models.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]models.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockServiceMockRecorder) GetProducts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockService)(nil).GetProducts), ctx)
}

// LoginUsers mocks base method.
func (m *MockService) LoginUsers(ctx context.Context, email, password string) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUsers", ctx, email, password)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUsers indicates an expected call of LoginUsers.
func (mr *MockServiceMockRecorder) LoginUsers(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUsers", reflect.TypeOf((*MockService)(nil).LoginUsers), ctx, email, password)
}

// RegisterUsers mocks base method.
func (m *MockService) RegisterUsers(ctx context.Context, email, name, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUsers", ctx, email, name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUsers indicates an expected call of RegisterUsers.
func (mr *MockServiceMockRecorder) RegisterUsers(ctx, email, name, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUsers", reflect.TypeOf((*MockService)(nil).RegisterUsers), ctx, email, name, password)
}

// RemoveUserRole mocks base method.
func (m *MockService) RemoveUserRole(ctx context.Context, userID, roleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRole", ctx, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRole indicates an expected call of RemoveUserRole.
func (mr *MockServiceMockRecorder) RemoveUserRole(ctx, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRole", reflect.TypeOf((*MockService)(nil).RemoveUserRole), ctx, userID, roleID)
}
